name: Security Scanning

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run security scans weekly on Mondays at 1 AM UTC
    - cron: '0 1 * * 1'
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.9'

jobs:
  # Job 1: Dependency Vulnerability Scanning
  dependency-security:
    name: Dependency Security Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety pip-audit

      - name: Run Safety check
        run: |
          safety check --json --output safety-report.json || true
          safety check --short-report

      - name: Run pip-audit
        run: |
          pip-audit --format=json --output=pip-audit-report.json || true
          pip-audit --desc

      - name: Upload dependency security reports
        uses: actions/upload-artifact@v3
        with:
          name: dependency-security-reports
          path: |
            safety-report.json
            pip-audit-report.json

  # Job 2: Static Code Security Analysis
  static-security:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit semgrep

      - name: Run Bandit security linter
        run: |
          bandit -r farm/ scripts/ benchmarks/ \
            -f json -o bandit-report.json \
            -ll || true
          bandit -r farm/ scripts/ benchmarks/ -ll

      - name: Run Semgrep static analysis
        run: |
          semgrep --config=auto \
            --json --output=semgrep-report.json \
            --error || true
          semgrep --config=auto

      - name: Upload static security reports
        uses: actions/upload-artifact@v3
        with:
          name: static-security-reports
          path: |
            bandit-report.json
            semgrep-report.json

  # Job 3: Container Security (if Docker is used)
  container-security:
    name: Container Security Scan
    runs-on: ubuntu-latest
    if: hashFiles('Dockerfile') != ''
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build Docker image
        run: |
          docker build -t agentfarm:latest .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'agentfarm:latest'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 4: Secrets Detection
  secrets-detection:
    name: Secrets Detection
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Run TruffleHog secrets detection
        uses: trufflesecurity/trufflehog@main
        with:
          path: ./
          base: main
          head: HEAD
          extra_args: --debug --only-verified

      - name: Run GitLeaks
        uses: gitleaks/gitleaks-action@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job 5: License Compliance
  license-compliance:
    name: License Compliance Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install license checking tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-licenses

      - name: Check package licenses
        run: |
          pip-licenses --format=json --output-file=licenses.json
          pip-licenses --format=table

      - name: Check for problematic licenses
        run: |
          python -c "
          import json
          
          with open('licenses.json', 'r') as f:
              packages = json.load(f)
          
          problematic_licenses = ['GPL', 'AGPL', 'Copyleft']
          issues = []
          
          for pkg in packages:
              license_name = pkg.get('License', '').upper()
              if any(prob in license_name for prob in problematic_licenses):
                  issues.append(f'{pkg[\"Name\"]}: {pkg[\"License\"]}')
          
          if issues:
              print('⚠️ Potentially problematic licenses found:')
              for issue in issues:
                  print(f'  - {issue}')
          else:
              print('✅ No problematic licenses detected')
          "

      - name: Upload license report
        uses: actions/upload-artifact@v3
        with:
          name: license-report
          path: licenses.json

  # Job 6: Security Summary and Notifications
  security-summary:
    name: Security Summary
    runs-on: ubuntu-latest
    needs: [dependency-security, static-security, secrets-detection, license-compliance]
    if: always()
    steps:
      - name: Download all security reports
        uses: actions/download-artifact@v3
        with:
          path: security-reports/

      - name: Generate security summary
        run: |
          python -c "
          import json
          import os
          import glob
          
          def analyze_security_reports():
              print('🔒 Security Scan Summary')
              print('=' * 50)
              
              # Check for safety issues
              safety_files = glob.glob('security-reports/dependency-security-reports/safety-report.json')
              if safety_files:
                  try:
                      with open(safety_files[0], 'r') as f:
                          safety_data = json.load(f)
                      if safety_data:
                          print(f'⚠️ Safety: {len(safety_data)} vulnerabilities found')
                      else:
                          print('✅ Safety: No vulnerabilities found')
                  except:
                      print('❓ Safety: Could not parse report')
              
              # Check for bandit issues
              bandit_files = glob.glob('security-reports/static-security-reports/bandit-report.json')
              if bandit_files:
                  try:
                      with open(bandit_files[0], 'r') as f:
                          bandit_data = json.load(f)
                      issues = bandit_data.get('results', [])
                      high_severity = len([i for i in issues if i.get('issue_severity') == 'HIGH'])
                      medium_severity = len([i for i in issues if i.get('issue_severity') == 'MEDIUM'])
                      low_severity = len([i for i in issues if i.get('issue_severity') == 'LOW'])
                      
                      print(f'🔍 Bandit: {high_severity} high, {medium_severity} medium, {low_severity} low severity issues')
                  except:
                      print('❓ Bandit: Could not parse report')
              
              # Check for semgrep issues
              semgrep_files = glob.glob('security-reports/static-security-reports/semgrep-report.json')
              if semgrep_files:
                  try:
                      with open(semgrep_files[0], 'r') as f:
                          semgrep_data = json.load(f)
                      issues = semgrep_data.get('results', [])
                      print(f'🔎 Semgrep: {len(issues)} security issues found')
                  except:
                      print('❓ Semgrep: Could not parse report')
          
          analyze_security_reports()
          "

      - name: Comment on PR with security summary
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            try {
              let comment = '## 🔒 Security Scan Results\n\n';
              
              // Check for safety issues
              const safetyFiles = require('glob').sync('security-reports/dependency-security-reports/safety-report.json');
              if (safetyFiles.length > 0) {
                try {
                  const safetyData = JSON.parse(fs.readFileSync(safetyFiles[0], 'utf8'));
                  if (safetyData && safetyData.length > 0) {
                    comment += `⚠️ **Dependency Vulnerabilities**: ${safetyData.length} issues found\n`;
                  } else {
                    comment += '✅ **Dependency Vulnerabilities**: No issues found\n';
                  }
                } catch (e) {
                  comment += '❓ **Dependency Vulnerabilities**: Could not parse report\n';
                }
              }
              
              // Check for bandit issues
              const banditFiles = require('glob').sync('security-reports/static-security-reports/bandit-report.json');
              if (banditFiles.length > 0) {
                try {
                  const banditData = JSON.parse(fs.readFileSync(banditFiles[0], 'utf8'));
                  const issues = banditData.results || [];
                  const high = issues.filter(i => i.issue_severity === 'HIGH').length;
                  const medium = issues.filter(i => i.issue_severity === 'MEDIUM').length;
                  const low = issues.filter(i => i.issue_severity === 'LOW').length;
                  
                  comment += `🔍 **Static Analysis**: ${high} high, ${medium} medium, ${low} low severity issues\n`;
                } catch (e) {
                  comment += '❓ **Static Analysis**: Could not parse report\n';
                }
              }
              
              comment += '\n📋 Check the workflow logs for detailed information.';
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } catch (error) {
              console.log('Could not create security comment:', error);
            }