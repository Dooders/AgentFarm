name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run weekly on Sundays at 2 AM UTC
    - cron: '0 2 * * 0'

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'

jobs:
  # Job 1: Code Quality and Linting
  code-quality:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pylint ruff mypy black isort

      - name: Run Black (Code Formatting Check)
        run: black --check --diff .

      - name: Run isort (Import Sorting Check)
        run: isort --check-only --diff .

      - name: Run Ruff (Fast Linting)
        run: ruff check . --output-format=github

      - name: Run Pylint (Comprehensive Linting)
        run: pylint farm/ scripts/ benchmarks/ --output-format=parseable --reports=y

      - name: Run MyPy (Type Checking)
        run: mypy farm/ --ignore-missing-imports --no-strict-optional

  # Job 2: Testing
  testing:
    name: Testing & Coverage
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10', '3.11']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest-cov pytest-xdist

      - name: Run tests with coverage
        run: |
          pytest tests/ \
            --cov=farm \
            --cov=benchmarks \
            --cov=scripts \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junitxml=pytest-results.xml \
            -v

      - name: Upload coverage to Codecov
        if: matrix.python-version == '3.9'
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            pytest-results.xml
            htmlcov/

  # Job 3: Security Scanning
  security:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install safety bandit semgrep

      - name: Run Safety (Dependency Vulnerability Check)
        run: safety check --json --output safety-report.json || true

      - name: Run Bandit (Security Linting)
        run: bandit -r farm/ scripts/ benchmarks/ -f json -o bandit-report.json || true

      - name: Run Semgrep (Static Analysis Security)
        run: semgrep --config=auto --json --output=semgrep-report.json . || true

      - name: Upload security reports
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: security-reports
          path: |
            safety-report.json
            bandit-report.json
            semgrep-report.json

  # Job 4: Performance Benchmarking
  benchmarking:
    name: Performance Benchmarking
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Memory Database Benchmark
        run: |
          python benchmarks/run_benchmarks.py \
            --benchmark memory_db \
            --steps 100 \
            --agents 20 \
            --iterations 3

      - name: Run Perception Metrics Benchmark (Small Scale)
        run: |
          python benchmarks/run_benchmarks.py \
            --benchmark perception_metrics \
            --pm-agents "50,100" \
            --pm-radii "5,8" \
            --pm-modes "hybrid" \
            --pm-steps 10

      - name: Run Observation Flow Benchmark
        run: |
          python benchmarks/run_benchmarks.py \
            --benchmark observation_flow \
            --obs-agents 100 \
            --obs-steps 50

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: benchmark-results
          path: benchmarks/results/

  # Job 5: Integration Testing
  integration:
    name: Integration Testing
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run integration tests
        run: |
          # Test with Redis available
          python -m pytest tests/integration/ -v --tb=short

      - name: Test simulation execution
        run: |
          # Test basic simulation run
          python run_simulation.py \
            --environment testing \
            --steps 50 \
            --profile benchmark

  # Job 6: Documentation and Build Validation
  documentation:
    name: Documentation & Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install sphinx sphinx-rtd-theme

      - name: Validate documentation
        run: |
          # Check if documentation can be built
          if [ -f "docs/conf.py" ]; then
            sphinx-build -b html docs/ docs/_build/html
          fi

      - name: Check for broken links in README
        run: |
          # Basic check for common markdown issues
          python -c "
          import re
          with open('README.md', 'r') as f:
              content = f.read()
          # Check for common markdown issues
          if re.search(r'\[.*\]\(.*\)', content):
              print('Found markdown links - consider validating them')
          "

  # Job 7: Performance Regression Detection
  performance-regression:
    name: Performance Regression Detection
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run baseline benchmarks (main branch)
        run: |
          git checkout main
          python benchmarks/run_benchmarks.py \
            --benchmark memory_db \
            --steps 50 \
            --agents 10 \
            --iterations 3 \
            --output baseline_results.json

      - name: Run PR benchmarks
        run: |
          git checkout ${{ github.head_ref }}
          python benchmarks/run_benchmarks.py \
            --benchmark memory_db \
            --steps 50 \
            --agents 10 \
            --iterations 3 \
            --output pr_results.json

      - name: Compare performance
        run: |
          python -c "
          import json
          import sys
          
          try:
              with open('baseline_results.json', 'r') as f:
                  baseline = json.load(f)
              with open('pr_results.json', 'r') as f:
                  pr = json.load(f)
              
              # Simple performance comparison
              baseline_time = baseline.get('mean_duration', 0)
              pr_time = pr.get('mean_duration', 0)
              
              if pr_time > baseline_time * 1.1:  # 10% regression threshold
                  print(f'⚠️ Performance regression detected!')
                  print(f'Baseline: {baseline_time:.2f}s, PR: {pr_time:.2f}s')
                  sys.exit(1)
              else:
                  print(f'✅ Performance within acceptable range')
                  print(f'Baseline: {baseline_time:.2f}s, PR: {pr_time:.2f}s')
          except Exception as e:
              print(f'Could not compare performance: {e}')
          "

  # Job 8: Dependency Management
  dependency-check:
    name: Dependency Management
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pip-tools pipdeptree

      - name: Check for dependency conflicts
        run: |
          pipdeptree --warn fail || true

      - name: Check for outdated dependencies
        run: |
          pip list --outdated

      - name: Generate requirements lock file
        run: |
          pip-compile requirements.txt --output-file requirements-lock.txt

      - name: Upload lock file
        uses: actions/upload-artifact@v3
        with:
          name: requirements-lock
          path: requirements-lock.txt

  # Job 9: Notification and Summary
  notify:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [code-quality, testing, security, benchmarking, integration, documentation, dependency-check]
    if: always()
    steps:
      - name: Notify on failure
        if: failure()
        run: |
          echo "❌ CI/CD Pipeline failed!"
          echo "Check the logs for details."
          
      - name: Notify on success
        if: success()
        run: |
          echo "✅ CI/CD Pipeline completed successfully!"
          echo "All checks passed."