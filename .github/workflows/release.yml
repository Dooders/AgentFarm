name: Release Pipeline

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., v1.0.0)'
        required: true
        type: string

env:
  PYTHON_VERSION: '3.9'

jobs:
  # Job 1: Pre-release Validation
  pre-release-validation:
    name: Pre-release Validation
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install build twine

      - name: Validate version consistency
        run: |
          # Check if version in pyproject.toml matches tag
          VERSION_TAG=${GITHUB_REF#refs/tags/}
          PYPROJECT_VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          
          echo "Tag version: $VERSION_TAG"
          echo "PyProject version: $PYPROJECT_VERSION"
          
          if [ "$VERSION_TAG" != "v$PYPROJECT_VERSION" ]; then
            echo "‚ùå Version mismatch between tag and pyproject.toml"
            exit 1
          fi
          echo "‚úÖ Version consistency check passed"

      - name: Run full test suite
        run: |
          pytest tests/ -v --cov=farm --cov-report=xml

      - name: Run security checks
        run: |
          safety check
          bandit -r farm/ scripts/ benchmarks/ -ll

      - name: Run performance benchmarks
        run: |
          python benchmarks/run_benchmarks.py \
            --benchmark memory_db \
            --steps 100 \
            --agents 20 \
            --iterations 3

  # Job 2: Build and Package
  build-package:
    name: Build Package
    runs-on: ubuntu-latest
    needs: pre-release-validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install build dependencies
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Build package
        run: |
          python -m build

      - name: Check package
        run: |
          twine check dist/*

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: dist
          path: dist/

  # Job 3: Create Release Notes
  generate-release-notes:
    name: Generate Release Notes
    runs-on: ubuntu-latest
    needs: pre-release-validation
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## Changes since $PREVIOUS_TAG" > release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> release_notes.md
          else
            echo "## Initial Release" > release_notes.md
            echo "" >> release_notes.md
            git log --pretty=format:"- %s (%h)" >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "## Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "Install from PyPI:" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "pip install agentfarm" >> release_notes.md
          echo "\`\`\`" >> release_notes.md

      - name: Upload release notes
        uses: actions/upload-artifact@v3
        with:
          name: release-notes
          path: release_notes.md

  # Job 4: Publish to PyPI
  publish-pypi:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: [build-package, generate-release-notes]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    environment: pypi
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Publish to PyPI
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

  # Job 5: Create GitHub Release
  create-github-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [build-package, generate-release-notes, publish-pypi]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release notes
        uses: actions/download-artifact@v3
        with:
          name: release-notes
          path: ./

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: dist
          path: dist/

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: release_notes.md
          draft: false
          prerelease: ${{ contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc') }}

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: dist/
          asset_name: agentfarm-distributions
          asset_content_type: application/zip

  # Job 6: Post-release Validation
  post-release-validation:
    name: Post-release Validation
    runs-on: ubuntu-latest
    needs: [publish-pypi, create-github-release]
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Wait for PyPI propagation
        run: sleep 60

      - name: Test installation from PyPI
        run: |
          # Extract version from tag
          VERSION=${GITHUB_REF#refs/tags/v}
          
          # Test installation
          pip install agentfarm==$VERSION
          
          # Test basic import
          python -c "import farm; print('‚úÖ AgentFarm imported successfully')"
          
          # Test CLI
          python -m farm.core.cli --help

      - name: Run smoke tests
        run: |
          # Test basic simulation run
          python run_simulation.py \
            --environment testing \
            --steps 10 \
            --profile benchmark

  # Job 7: Notify Release
  notify-release:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: [post-release-validation]
    if: always() && github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Notify successful release
        if: needs.post-release-validation.result == 'success'
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "üéâ Successfully released AgentFarm v$VERSION!"
          echo "üì¶ Available on PyPI: https://pypi.org/project/agentfarm/"
          echo "üìã Release notes: https://github.com/${{ github.repository }}/releases/tag/${{ github.ref }}"

      - name: Notify failed release
        if: needs.post-release-validation.result == 'failure'
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "‚ùå Release validation failed for AgentFarm v$VERSION"
          echo "Please check the workflow logs for details."